// ======= IOT + Google Assistant Voice Control with FreeRTOS (ESP32) =======

// -------------------- BLYNK CONFIGURATION --------------------
#define BLYNK_TEMPLATE_ID "TMPL6MqMFPbAp"
#define BLYNK_TEMPLATE_NAME "IOTN5 ESP32 DHT11 FAN"
#define BLYNK_AUTH_TOKEN "npjZsmVBGbYBMZv14oLN1tcFthiGB8c"

#include <Arduino.h>
#include <WiFi.h>
#include <DHT.h>
#include <BlynkSimpleEsp32.h>
#include <WiFiClientSecure.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

// -------------------- WIFI CONFIGURATION --------------------
#define WIFI_SSID       "towmiess"
#define WIFI_PASSWORD   "12345678"

// -------------------- DHT SENSOR --------------------
#define DHT_PIN 15
#define DHT_TYPE DHT11
DHT dht(DHT_PIN, DHT_TYPE);

// -------------------- DEVICE PINS --------------------
#define RELAY_PUMP_PIN 27
#define FAN_PWM_PIN 14
#define FAN_IN1_PIN 12
#define FAN_IN2_PIN 13
#define TRIG_PIN 4
#define ECHO_PIN 5
#define LDR_PIN 34
#define LED1_PIN 16
#define LED2_PIN 17

// -------------------- GLOBAL STATES --------------------
bool pumpState = false, autoPumpControl = false;
bool led1State = false, autoLed1Control = false;
bool led2State = false, autoLed2Control = false;
uint8_t fanSpeed = 0;         // 0 - 3 (level)
bool autoFanControl = false;

// PWM levels t∆∞∆°ng ·ª©ng t·ªëc ƒë·ªô qu·∫°t: 0%, 33%, 66%, 100%
const uint8_t fanSpeedLevels[4] = {0, 85, 170, 255};

// -------------------- MQTT CONFIGURATION --------------------
#define AIO_SERVER       "io.adafruit.com"
#define AIO_SERVERPORT   1883
#define AIO_USERNAME     "towmiess"
#define AIO_KEY          "aio_LZTG22O18i5U857MqAVGYNm38MYd"

WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
Adafruit_MQTT_Subscribe fanFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/fan");
Adafruit_MQTT_Subscribe pumpFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/pump");
Adafruit_MQTT_Subscribe led1Feed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/led1");
Adafruit_MQTT_Subscribe led2Feed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/led2");
Adafruit_MQTT_Subscribe fanSpeedUpFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/fan_speed_up");
Adafruit_MQTT_Subscribe fanSpeedDownFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/fan_speed_down");

// -------------------- SEMAPHORES --------------------
SemaphoreHandle_t wifiMutex, tempMutex, lightMutex, distMutex;

float lastTemperature = 0.0, lastHumidity = 0.0, latestDistance = 0;
int latestLight = 0;

// -------------------- HARDWARE CONTROL FUNCTIONS --------------------

/**
 * Thi·∫øt l·∫≠p t·ªëc ƒë·ªô qu·∫°t d·ª±a theo level t·ª´ 0 ƒë·∫øn 3.
 * Level 0 l√† t·∫Øt qu·∫°t, 3 l√† t·ªëc ƒë·ªô max.
 */
void setFanSpeed(uint8_t speed) {
  if (speed > 3) speed = 3;  // ƒë·∫£m b·∫£o gi·ªõi h·∫°n
  digitalWrite(FAN_IN1_PIN, speed > 0 ? HIGH : LOW);
  digitalWrite(FAN_IN2_PIN, LOW);
  ledcWrite(0, fanSpeedLevels[speed]);
  fanSpeed = speed;
  Serial.printf("üåÄ Qu·∫°t t·ªëc ƒë·ªô %d (PWM=%d)\n", speed, fanSpeedLevels[speed]);

}

/**
 * B·∫≠t/t·∫Øt LED1 v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i to√†n c·ª•c.
 */
void setLed1(bool state) {
  digitalWrite(LED1_PIN, state);
  led1State = state;
  Serial.printf("üí° LED1 %s\n", state ? "B·∫¨T" : "T·∫ÆT");
}

/**
 * B·∫≠t/t·∫Øt LED2 v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i to√†n c·ª•c.
 */
void setLed2(bool state) {
  digitalWrite(LED2_PIN, state);
  led2State = state;
  Serial.printf("üí° LED2 %s\n", state ? "B·∫¨T" : "T·∫ÆT");
}

/**
 * ƒê·ªçc kho·∫£ng c√°ch t·ª´ c·∫£m bi·∫øn si√™u √¢m.Tr·∫£ v·ªÅ kho·∫£ng c√°ch (cm), -1 n·∫øu l·ªói.
 */
float readUltrasonicDistance() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  return (duration == 0) ? -1 : duration * 0.034 / 2;
}

// -------------------- MQTT SUBSCRIPTION CALLBACK --------------------

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ MQTT.
 * ƒêi·ªÅu khi·ªÉn thi·∫øt b·ªã theo payload.
 */
void mqttCallback(char *data, uint16_t len) {
  // x·ª≠ l√Ω d·ªØ li·ªáu data c√≥ ƒë·ªô d√†i len
  Serial.print("MQTT message received: ");
  Serial.write(data, len);
  Serial.println();
  // L·∫•y topic
  String topic = String(data);

  // L·∫•y payload d·∫°ng char*
  String payload = String((char *)data);

  // X·ª≠ l√Ω t·ª´ng topic
  if (topic.endsWith("fan")) {
    if (!autoFanControl) {
      int speed = payload.toInt();
      if (speed >= 0 && speed <= 3) setFanSpeed(speed);
    }
  } else if (topic.endsWith("pump")) {
    pumpState = (payload.toInt() == 1);
    digitalWrite(RELAY_PUMP_PIN, pumpState ? LOW : HIGH);
  } else if (topic.endsWith("led1")) {
    setLed1(payload.toInt() == 1);
  } else if (topic.endsWith("led2")) {
    setLed2(payload.toInt() == 1);
  } else if (topic.endsWith("fan_speed_up")) {
    if (!autoFanControl && fanSpeed < 3) setFanSpeed(fanSpeed + 1);
  } else if (topic.endsWith("fan_speed_down")) {
    if (!autoFanControl && fanSpeed > 0) setFanSpeed(fanSpeed - 1);
  }
}


//

// -------------------- RTOS TASK DEFINITIONS --------------------

// üì° K·∫øt n·ªëi WiFi
void WiFiTask(void *pvParameters) {
    while (true) {
        if (WiFi.status() != WL_CONNECTED) {
            Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi...");
            
            // üõë Gi·ªØ quy·ªÅn truy c·∫≠p WiFi
            xSemaphoreTake(wifiMutex, portMAX_DELAY);

            WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
            int attempt = 0;
            while (WiFi.status() != WL_CONNECTED && attempt < 10) {
                delay(1000);
                Serial.print(".");
                attempt++;
            }

            // ‚úÖ Tr·∫£ quy·ªÅn truy c·∫≠p WiFi
            xSemaphoreGive(wifiMutex);

            Serial.println(WiFi.status() == WL_CONNECTED ? "‚úÖ WiFi K·∫øt n·ªëi!" : "‚ùå L·ªói WiFi!");
        }
        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}

// üì° ƒê·ªçc c·∫£m bi·∫øn DHT11
void DHTTask(void *pvParameters) {
    while (true) {
        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();

        if (!isnan(temperature) && !isnan(humidity)) {
            // üõë Gi·ªØ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu nhi·ªát ƒë·ªô
            xSemaphoreTake(tempMutex, portMAX_DELAY);// Chi·∫øm quy·ªÅn truy c·∫≠p bi·∫øn nhi·ªát ƒë·ªô
            lastTemperature = temperature;// L∆∞u nhi·ªát ƒë·ªô ƒë·ªçc ƒë∆∞·ª£c
            xSemaphoreGive(tempMutex);//‚úÖ Tr·∫£ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu nhi·ªát ƒë·ªô

            Serial.printf("üå° Nhi·ªát ƒë·ªô: %.1f¬∞C, ƒê·ªô ·∫©m: %.1f%%\n", temperature, humidity);
            // Blynk.virtualWrite(V2, temperature);
            // Blynk.virtualWrite(V3, humidity);
        } else {
            Serial.println("‚ùå L·ªói c·∫£m bi·∫øn!");
        }

        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}


/**
 * Task ƒë·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn kho·∫£ng c√°ch si√™u √¢m.
 */
void UltrasonicTask(void *pv) {
  while (1) {
    // ƒê·ªçc kho·∫£ng c√°ch t·ª´ c·∫£m bi·∫øn si√™u √¢m
    float dist = readUltrasonicDistance();

    // N·∫øu kho·∫£ng c√°ch h·ª£p l·ªá (> 0), l∆∞u gi√° tr·ªã v√†o bi·∫øn to√†n c·ª•c
    if (dist > 0) {
      // üõë Chi·∫øm quy·ªÅn truy c·∫≠p bi·∫øn `latestDistance` b·∫±ng semaphore
      xSemaphoreTake(distMutex, portMAX_DELAY);
      latestDistance = dist; // L∆∞u gi√° tr·ªã kho·∫£ng c√°ch
      xSemaphoreGive(distMutex); // ‚úÖ Tr·∫£ quy·ªÅn truy c·∫≠p bi·∫øn `latestDistance`
    }

    // Delay ƒë·ªÉ gi·∫£m t·∫ßn su·∫•t ƒë·ªçc c·∫£m bi·∫øn (500ms)
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

/**
 * Task ƒë·ªçc gi√° tr·ªã c·∫£m bi·∫øn √°nh s√°ng quang tr·ªü.
 */
void PhotoresistorTask(void *pv) {
  while (1) {
    int val = analogRead(LDR_PIN);
    xSemaphoreTake(lightMutex, portMAX_DELAY);
    latestLight = val;
    xSemaphoreGive(lightMutex);
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

/**
 * Task t·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn LED1 d·ª±a tr√™n √°nh s√°ng m√¥i tr∆∞·ªùng.
 */
void AutoLed1Task(void *pv) {
  while (1) {
    if (autoLed1Control) {
      xSemaphoreTake(lightMutex, portMAX_DELAY);
      setLed1(latestLight < 1000);
      Serial.println("üí° T·ªëi - B·∫≠t ƒë√®n");

      xSemaphoreGive(lightMutex);
    }
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

/**
 * Task t·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn LED2 d·ª±a tr√™n kho·∫£ng c√°ch.
 */
void AutoLed2Task(void *pv) {
  while (1) {
    if (autoLed2Control) {
      xSemaphoreTake(distMutex, portMAX_DELAY);
      setLed2(latestDistance < 15.0 && latestDistance > 0);
      Serial.println("üí° V·∫≠t th·ªÉ g·∫ßn - B·∫≠t ƒë√®n");
      xSemaphoreGive(distMutex);
    }
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

/**
 * 8.Task t·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn m√°y b∆°m d·ª±a tr√™n nhi·ªát ƒë·ªô N·∫øu nhi·ªát ƒë·ªô l·ªõn h∆°n 30¬∞C th√¨ b·∫≠t b∆°m, ng∆∞·ª£c l·∫°i t·∫Øt b∆°m.
 */
void AutoPumpTask(void *pv) {
  pinMode(RELAY_PUMP_PIN, OUTPUT);
  digitalWrite(RELAY_PUMP_PIN, HIGH); // m·∫∑c ƒë·ªãnh OFF
  while (1) {
    xSemaphoreTake(tempMutex, portMAX_DELAY);
    float t = lastTemperature;
    xSemaphoreGive(tempMutex);
    if (autoPumpControl) {
      if (t > 30 && !pumpState) {
        pumpState = true;
        digitalWrite(RELAY_PUMP_PIN, LOW);
        Blynk.virtualWrite(V7, 1);
      } else if (t <= 30 && pumpState) {
        pumpState = false;
        digitalWrite(RELAY_PUMP_PIN, HIGH);
        Blynk.virtualWrite(V7, 0);
      }
    }
    vTaskDelay(10000 / portTICK_PERIOD_MS);
  }
}
/**
 * Task t·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn qu·∫°t d·ª±a tr√™n nhi·ªát ƒë·ªô.
 */
void AutoFanTask(void *pv) {
  while (1) {
      // üõë ƒê·ªçc gi√° tr·ªã nhi·ªát ƒë·ªô t·ª´ bi·∫øn lastTemperature
      // S·ª≠ d·ª•ng mutex ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng ch·ªâ m·ªôt task c√≥ th·ªÉ truy c·∫≠p bi·∫øn n√†y t·∫°i m·ªôt th·ªùi ƒëi·ªÉm

    if (autoFanControl) {
      xSemaphoreTake(tempMutex, portMAX_DELAY);
      float temp = lastTemperature;
      xSemaphoreGive(tempMutex);

      if (temp >= 32) setFanSpeed(3);
      else if (temp >= 30) setFanSpeed(2);
      else if (temp >= 25) setFanSpeed(1);
      else setFanSpeed(0);
    }
    vTaskDelay(10000 / portTICK_PERIOD_MS);
  }
}

/**
 * Task x·ª≠ l√Ω MQTT v√† nh·∫≠n d·ªØ li·ªáu.
 */
// üì° K·∫øt n·ªëi MQTT
// ƒê√£ s·ª≠ d·ª•ng Adafruit_MQTT_Client (mqtt) v√† ƒë√£ subscribe/callback ·ªü ph·∫ßn setup, kh√¥ng c·∫ßn h√†m connectMQTT ri√™ng.

/**
 * Task x·ª≠ l√Ω k·∫øt n·ªëi v√† nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT.
 * ƒê·∫£m b·∫£o lu√¥n duy tr√¨ k·∫øt n·ªëi, t·ª± ƒë·ªông reconnect n·∫øu m·∫•t k·∫øt n·ªëi.
 */
void MQTTTask(void *pv) {
  mqtt.connect(); // K·∫øt n·ªëi MQTT l·∫ßn ƒë·∫ßu
  while (1) {
    mqtt.processPackets(10000); // X·ª≠ l√Ω c√°c g√≥i tin MQTT (timeout 10s)
    if (!mqtt.ping()) {         // Ki·ªÉm tra k·∫øt n·ªëi, n·∫øu m·∫•t th√¨ reconnect
      mqtt.disconnect();
      mqtt.connect();
    }
    vTaskDelay(500 / portTICK_PERIOD_MS); // Delay 500ms tr∆∞·ªõc l·∫ßn l·∫∑p ti·∫øp theo
  }
}

/**
 * Task g·ª≠i d·ªØ li·ªáu l√™n Blynk ƒë·ªãnh k·ª≥.
 */
void BlynkSendTask(void *pv) {
  while (1) {
    xSemaphoreTake(tempMutex, portMAX_DELAY);
    Blynk.virtualWrite(V10, lastTemperature);
    Serial.println("Nhi·ªát ƒë·ªô: " + String(lastTemperature) + "¬∞C");

    Blynk.virtualWrite(V11, lastHumidity);
    Serial.println("ƒê·ªô ·∫©m: " + String(lastHumidity) + "%");
    xSemaphoreGive(tempMutex);
    
    xSemaphoreTake(distMutex, portMAX_DELAY);
    Blynk.virtualWrite(V12, latestDistance);
    Serial.println("Kho·∫£ng c√°ch: " + String(latestDistance) + "cm");
    xSemaphoreGive(distMutex);

    xSemaphoreTake(lightMutex, portMAX_DELAY);
    Blynk.virtualWrite(V13, latestLight);
    Serial.println("C∆∞·ªùng ƒë·ªô √Ånh s√°ng trong ph√≤ng: " + String(latestLight));
    xSemaphoreGive(lightMutex);

    Blynk.virtualWrite(V14, pumpState);
    Serial.println(pumpState ? "üíß B·∫≠t b∆°m (Th·ªß c√¥ng)" : "üíß T·∫Øt b∆°m (Th·ªß c√¥ng)");
    
    Blynk.virtualWrite(V15, fanSpeed);
    Serial.println("T·ªëc ƒë·ªô qu·∫°t: " + String(fanSpeed));
    
    Blynk.virtualWrite(V16, led1State);
    Serial.println("üí° LED1: " + String(led1State));
    
    Blynk.virtualWrite(V17, led2State);
    Serial.println("üí° LED2: " + String(led2State));

    vTaskDelay(2000 / portTICK_PERIOD_MS);
  }
}

// -------------------- BLYNK WRITE HANDLERS --------------------

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông b∆°m n∆∞·ªõc (V0).
 */
BLYNK_WRITE(V0) {
  autoPumpControl = param.asInt();
  if (!autoPumpControl) {
    digitalWrite(RELAY_PUMP_PIN, pumpState ? LOW : HIGH);
    Serial.println(pumpState ? "üíß B·∫≠t b∆°m (Th·ªß c√¥ng)" : "üíß T·∫Øt b∆°m (Th·ªß c√¥ng)");
  } 
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt b∆°m n∆∞·ªõc th·ªß c√¥ng (V1).
 */
BLYNK_WRITE(V1) {
  if (!autoPumpControl) {
    pumpState = param.asInt();
    digitalWrite(RELAY_PUMP_PIN, pumpState ? LOW : HIGH);
    Serial.println(pumpState ? "üíß B·∫≠t b∆°m (Th·ªß c√¥ng)" : "üíß T·∫Øt b∆°m (Th·ªß c√¥ng)");
  } else {
    Serial.println("üíß T·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn b∆°m ƒëang b·∫≠t, kh√¥ng th·ªÉ t·∫Øt th·ªß c√¥ng");
  }
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông qu·∫°t (V2).
 */
BLYNK_WRITE(V2) {
  autoFanControl = param.asInt();
  if (!autoFanControl) setFanSpeed(0);
}

/**
 * X·ª≠ l√Ω thay ƒë·ªïi t·ªëc ƒë·ªô qu·∫°t th·ªß c√¥ng (V3).
 */
BLYNK_WRITE(V3) {
  if (!autoFanControl) {
    uint8_t speed = param.asInt();

    if (speed >= 0 && speed <= 3){
      setFanSpeed(speed);
      Serial.printf("üåÄ Thay ƒë·ªïi t·ªëc ƒë·ªô qu·∫°t: %d\n", speed);
    } else {
      Serial.println("‚ùå T·ªëc ƒë·ªô qu·∫°t kh√¥ng h·ª£p l·ªá (0-3)");
    }
  }
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông LED1 (V4).
 */
BLYNK_WRITE(V4) {
  autoLed1Control = param.asInt();
  if (!autoLed1Control) setLed1(false);
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt LED1 th·ªß c√¥ng (V5).
 */
BLYNK_WRITE(V5) {
  if (!autoLed1Control) {
    setLed1(param.asInt());
    Serial.println(led1State ? "üí° B·∫≠t ƒë√®n (Th·ªß c√¥ng)" : "üí° T·∫Øt ƒë√®n (Th·ªß c√¥ng)");
  }
  else {
    Serial.println("üí° T·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn LED1 ƒëang b·∫≠t, kh√¥ng th·ªÉ t·∫Øt th·ªß c√¥ng");
  }
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông LED2 (V6).
 */
BLYNK_WRITE(V6) {
  autoLed2Control = param.asInt();
  if (!autoLed2Control) setLed2(false);
}

/**
 * X·ª≠ l√Ω n√∫t b·∫≠t/t·∫Øt LED2 th·ªß c√¥ng (V7).
 */
BLYNK_WRITE(V7) {
  if (!autoLed2Control) {
    setLed2(param.asInt());
    Serial.println(led2State ? "üí° B·∫≠t ƒë√®n (Th·ªß c√¥ng)" : "üí° T·∫Øt ƒë√®n (Th·ªß c√¥ng)");
  } else{
    Serial.println("üí° T·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn LED2 ƒëang b·∫≠t, kh√¥ng th·ªÉ t·∫Øt th·ªß c√¥ng");
  }

}

// -------------------- SETUP --------------------
void setup() {
  Serial.begin(115200);

  // Kh·ªüi t·∫°o c√°c ch√¢n
  pinMode(RELAY_PUMP_PIN, OUTPUT);
  digitalWrite(RELAY_PUMP_PIN, HIGH); // relay th∆∞·ªùng ƒë√≥ng (OFF)
  
  pinMode(FAN_PWM_PIN, OUTPUT);
  pinMode(FAN_IN1_PIN, OUTPUT);
  pinMode(FAN_IN2_PIN, OUTPUT);
  setFanSpeed(0);
  
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  pinMode(LDR_PIN, INPUT);
  pinMode(LED1_PIN, OUTPUT);
  pinMode(LED2_PIN, OUTPUT);
  
  dht.begin();

  // PWM setup cho qu·∫°t
  ledcSetup(0, 12000, 8);
  ledcAttachPin(FAN_PWM_PIN, 0);

  // Kh·ªüi t·∫°o semaphore
  wifiMutex = xSemaphoreCreateMutex();
  tempMutex = xSemaphoreCreateMutex();
  lightMutex = xSemaphoreCreateMutex();
  distMutex = xSemaphoreCreateMutex();

  // K·∫øt n·ªëi WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected");

  // K·∫øt n·ªëi Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_SSID, WIFI_PASSWORD);

  // K·∫øt n·ªëi MQTT v√† subscribe
  mqtt.subscribe(&fanFeed);
  mqtt.subscribe(&pumpFeed);
  mqtt.subscribe(&led1Feed);
  mqtt.subscribe(&led2Feed);
  mqtt.subscribe(&fanSpeedUpFeed);
  mqtt.subscribe(&fanSpeedDownFeed);

  // ƒêƒÉng k√Ω callback MQTT
  fanFeed.setCallback(mqttCallback);
  pumpFeed.setCallback(mqttCallback);
  led1Feed.setCallback(mqttCallback);
  led2Feed.setCallback(mqttCallback);
  fanSpeedUpFeed.setCallback(mqttCallback);
  fanSpeedDownFeed.setCallback(mqttCallback);


  // FreeRTOS tasks
  // CORE 0: X·ª≠ l√Ω m·∫°ng
  xTaskCreatePinnedToCore(WiFiTask,            "WiFiTask",     2048, NULL, 3, NULL, 0);
  xTaskCreatePinnedToCore(MQTTTask,            "MQTTTask",     4096, NULL, 3, NULL, 0);

  // CORE 1: X·ª≠ l√Ω c·∫£m bi·∫øn + thi·∫øt b·ªã
  xTaskCreatePinnedToCore(DHTTask,             "DHTTask",      4096, NULL, 2, NULL, 1);
  xTaskCreatePinnedToCore(UltrasonicTask,  "UltrasonicRd", 2048, NULL, 2, NULL, 1);
  xTaskCreatePinnedToCore(PhotoresistorTask,"PhotoRd",     2048, NULL, 2, NULL, 1);

  xTaskCreatePinnedToCore(AutoLed1Task,        "Led1Ctrl",     2048, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(AutoLed2Task,        "Led2Ctrl",     2048, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(AutoFanTask,         "FanCtrl",      2048, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(AutoPumpTask,        "PumpCtrl",     2048, NULL, 1, NULL, 1);

}

// -------------------- MAIN LOOP --------------------
void loop() {
  // Blynk ch·∫°y trong loop
  Blynk.run();
}
