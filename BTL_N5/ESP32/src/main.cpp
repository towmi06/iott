// üîπ C·∫•u h√¨nh Blynk
#define BLYNK_TEMPLATE_ID "TMPL6MqMFPbAp"
#define BLYNK_TEMPLATE_NAME "IOTN5 ESP32 DHT11 FAN"
#define BLYNK_AUTH_TOKEN "npjZsmVBGbYBMZv14oLN1tcFthiGBG8c"

#include <Arduino.h>
#include <WiFi.h>
#include <DHT.h>
#include <BlynkSimpleEsp32.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include <FirebaseESP32.h>

// üîπ C·∫•u h√¨nh WiFi
#define WIFI_SSID "towmiess"
#define WIFI_PASSWORD "12345678"

// üîπ C·∫•u h√¨nh Firebase
#define FIREBASE_HOST "https://dht11-125c7-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "gcvJ7k7KyjJYpLawuXZAEBymwm4aW6yFgZY56Zcq"
FirebaseData firebaseData;
FirebaseAuth firebaseAuth;
FirebaseConfig firebaseConfig;

// üîπ C·∫•u h√¨nh DHT11
#define DHT_PIN 15
#define DHT_TYPE DHT11
DHT dht(DHT_PIN, DHT_TYPE);

// üîπ C·∫•u h√¨nh Relay (Qu·∫°t)
#define RELAY_FAN_PIN 14
bool fanState = false;
bool autoFanControl = true;

// üîπ C·∫•u h√¨nh MQTT (HiveMQ)
#define MQTT_SERVER "e4d6461e44b845fdbc9a32917b240fa3.s1.eu.hivemq.cloud"
#define MQTT_PORT 8883
#define MQTT_USER "IOTN5"
#define MQTT_PASSWORD "Nhom5IOT"
#define MQTT_PUBLISH_TOPIC "esp32/sensor/data"
#define MQTT_SUBSCRIBE_TOPIC "esp32/fan/control"

WiFiClientSecure espClient;
PubSubClient mqttClient(espClient);

SemaphoreHandle_t wifiMutex;
SemaphoreHandle_t tempMutex;
float lastTemperature = 0.0;

// üì° K·∫øt n·ªëi WiFi
void WiFiTask(void *pvParameters) {
    while (true) {
        if (WiFi.status() != WL_CONNECTED) {
            Serial.print("üîÑ ƒêang k·∫øt n·ªëi WiFi...");
            
            // üõë Gi·ªØ quy·ªÅn truy c·∫≠p WiFi
            xSemaphoreTake(wifiMutex, portMAX_DELAY);

            WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
            int attempt = 0;
            while (WiFi.status() != WL_CONNECTED && attempt < 10) {
                delay(1000);
                Serial.print(".");
                attempt++;
            }

            // ‚úÖ Tr·∫£ quy·ªÅn truy c·∫≠p WiFi
            xSemaphoreGive(wifiMutex);

            Serial.println(WiFi.status() == WL_CONNECTED ? "‚úÖ WiFi K·∫øt n·ªëi!" : "‚ùå L·ªói WiFi!");
        }
        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}


// üì° Nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT
void callbackMQTT(char *topic, byte *payload, unsigned int length) {
    String message;
    for (unsigned int i = 0; i < length; i++) {
        message += (char)payload[i];
    }

    if (String(topic) == MQTT_SUBSCRIBE_TOPIC) {
        bool command = (message == "ON");
        if (autoFanControl) {
            Serial.println("‚õî Kh√¥ng th·ªÉ thao t√°c th·ªß c√¥ng khi Auto b·∫≠t!");
        } else {
            fanState = command;
            digitalWrite(RELAY_FAN_PIN, fanState ? LOW : HIGH);
            Blynk.virtualWrite(V1, fanState);
            Serial.printf("üîπ Qu·∫°t %s\n", fanState ? "B·∫¨T" : "T·∫ÆT");
        }
    }
}
// üì° K·∫øt n·ªëi MQTT
void connectMQTT() {
    espClient.setInsecure(); // B·ªè qua ki·ªÉm tra ch·ª©ng ch·ªâ SSL (d√πng cho MQTTs n·∫øu c·∫ßn)
    mqttClient.setServer(MQTT_SERVER, MQTT_PORT); // Thi·∫øt l·∫≠p m√°y ch·ªß MQTT
    mqttClient.setCallback(callbackMQTT); // ƒê·ªãnh nghƒ©a h√†m x·ª≠ l√Ω khi nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT

    while (!mqttClient.connected()) {
        Serial.print("üîÑ K·∫øt n·ªëi MQTT...");
        if (mqttClient.connect("ESP32_Client", MQTT_USER, MQTT_PASSWORD)) {
            Serial.println("‚úÖ MQTT K·∫øt n·ªëi!");
            mqttClient.subscribe(MQTT_SUBSCRIBE_TOPIC); // ƒêƒÉng k√Ω ch·ªß ƒë·ªÅ ƒë·ªÉ nh·∫≠n l·ªánh
        } else {
            Serial.println("‚ùå L·ªói MQTT, th·ª≠ l·∫°i...");
            vTaskDelay(5000 / portTICK_PERIOD_MS); // ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        }
    }
}

// üì° X·ª≠ l√Ω MQTT
void MQTTTask(void *pvParameters) {
    connectMQTT(); // K·∫øt n·ªëi MQTT khi kh·ªüi ƒë·ªông
    while (true) {
        if (!mqttClient.connected()) {
            connectMQTT(); // N·∫øu m·∫•t k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i
        }
        mqttClient.loop(); // L·∫Øng nghe v√† x·ª≠ l√Ω d·ªØ li·ªáu MQTT
        vTaskDelay(100 / portTICK_PERIOD_MS); // Ch·ªù 100ms tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
    }
}



// üì° ƒê·ªçc c·∫£m bi·∫øn DHT11
void DHTTask(void *pvParameters) {
    while (true) {
        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();

        if (!isnan(temperature) && !isnan(humidity)) {
            // üõë Gi·ªØ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu nhi·ªát ƒë·ªô
            xSemaphoreTake(tempMutex, portMAX_DELAY);// Chi·∫øm quy·ªÅn truy c·∫≠p bi·∫øn nhi·ªát ƒë·ªô
            lastTemperature = temperature;// L∆∞u nhi·ªát ƒë·ªô ƒë·ªçc ƒë∆∞·ª£c
            xSemaphoreGive(tempMutex);//‚úÖ Tr·∫£ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu nhi·ªát ƒë·ªô

            Serial.printf("üå° Nhi·ªát ƒë·ªô: %.1f¬∞C, ƒê·ªô ·∫©m: %.1f%%\n", temperature, humidity);
            Blynk.virtualWrite(V2, temperature);
            Blynk.virtualWrite(V3, humidity);
            // T·∫°o chu·ªói JSON ƒë·ªÉ g·ª≠i d·ªØ li·ªáu l√™n MQTT
            String mqttMessage = "{\"temperature\": " + String(temperature) + ", \"humidity\": " + String(humidity) + "}";
            mqttClient.publish(MQTT_PUBLISH_TOPIC, mqttMessage.c_str());// G·ª≠i d·ªØ li·ªáu l√™n MQTT
        } else {
            Serial.println("‚ùå L·ªói c·∫£m bi·∫øn!");
        }

        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}

// üì° ƒêi·ªÅu khi·ªÉn qu·∫°t t·ª± ƒë·ªông
void FanControlTask(void *pvParameters) {
    while (true) {
        // üõë ƒê·ªçc gi√° tr·ªã nhi·ªát ƒë·ªô t·ª´ bi·∫øn lastTemperature
        // S·ª≠ d·ª•ng mutex ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng ch·ªâ m·ªôt task c√≥ th·ªÉ truy c·∫≠p bi·∫øn n√†y t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
        xSemaphoreTake(tempMutex, portMAX_DELAY);// Chi·∫øm quy·ªÅn truy c·∫≠p bi·∫øn nhi·ªát ƒë·ªô
        float temp = lastTemperature; // L∆∞u gi√° tr·ªã nhi·ªát ƒë·ªô hi·ªán t·∫°i
        xSemaphoreGive(tempMutex);// Gi·∫£i ph√≥ng quy·ªÅn truy c·∫≠p bi·∫øn nhi·ªát ƒë·ªô
        // üîπ N·∫øu ch·∫ø ƒë·ªô t·ª± ƒë·ªông b·∫≠t, ƒëi·ªÅu khi·ªÉn qu·∫°t theo nhi·ªát ƒë·ªô
        if (autoFanControl) {
            if (temp > 25.0 && !fanState) {
                fanState = true;
                digitalWrite(RELAY_FAN_PIN, LOW);
                Blynk.virtualWrite(V1, 1);
                Serial.println("üåÄ Qu·∫°t b·∫≠t (T·ª± ƒë·ªông)");
            } else if (temp <= 25.0 && fanState) {
                fanState = false;
                digitalWrite(RELAY_FAN_PIN, HIGH);
                Blynk.virtualWrite(V1, 0);
                Serial.println("‚ùÑÔ∏è Qu·∫°t t·∫Øt (T·ª± ƒë·ªông)");
            }
        }

        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}

// üì° G·ª≠i d·ªØ li·ªáu l√™n Firebase
void FirebaseTask(void *pvParameters) {
    // C·∫•u h√¨nh Firebase
    firebaseConfig.database_url = FIREBASE_HOST;
    firebaseAuth.user.email = "";
    firebaseAuth.user.password = "";
    firebaseConfig.signer.tokens.legacy_token = FIREBASE_AUTH;

    Firebase.begin(&firebaseConfig, &firebaseAuth);
    Firebase.reconnectWiFi(true);

    while (true) {
        if (WiFi.status() == WL_CONNECTED && Firebase.ready()) {
            // üîê ƒê·ªçc nhi·ªát ƒë·ªô t·ª´ bi·∫øn d√πng mutex
            xSemaphoreTake(tempMutex, portMAX_DELAY);
            float temp = lastTemperature;
            xSemaphoreGive(tempMutex);

            // G·ª≠i nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m l√™n Firebase
            String path = "/esp32";
            Firebase.setFloat(firebaseData, path + "/temperature", temp);
            Firebase.setFloat(firebaseData, path + "/humidity", dht.readHumidity());
        } else {
            Serial.println("‚ö†Ô∏è Firebase ch∆∞a s·∫µn s√†ng ho·∫∑c WiFi m·∫•t k·∫øt n·ªëi!");
        }

        vTaskDelay(5000 / portTICK_PERIOD_MS); // G·ª≠i m·ªói 5 gi√¢y
    }
}

// üì° Nh·∫≠n l·ªánh t·ª´ Blynk
BLYNK_WRITE(V4) {
    // üõ†Ô∏è Nh·∫≠n d·ªØ li·ªáu t·ª´ Blynk ƒë·ªÉ b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô qu·∫°t t·ª± ƒë·ªông
    autoFanControl = param.asInt(); // L∆∞u tr·∫°ng th√°i c·ªßa ch·∫ø ƒë·ªô t·ª± ƒë·ªông
    Serial.printf("‚öôÔ∏è Ch·∫ø ƒë·ªô t·ª± ƒë·ªông: %s\n", autoFanControl ? "B·∫¨T" : "T·∫ÆT");
}

BLYNK_WRITE(V1) {
    // üîπ N·∫øu ch·∫ø ƒë·ªô t·ª± ƒë·ªông ƒëang t·∫Øt, cho ph√©p ƒëi·ªÅu khi·ªÉn qu·∫°t th·ªß c√¥ng
    if (!autoFanControl) {
        fanState = param.asInt(); // L∆∞u tr·∫°ng th√°i m·ªõi c·ªßa qu·∫°t
        digitalWrite(RELAY_FAN_PIN, fanState ? LOW : HIGH); // ƒêi·ªÅu khi·ªÉn relay
        Serial.printf("üîπ Qu·∫°t %s\n", fanState ? "B·∫¨T" : "T·∫ÆT");
    } else {
        // ‚õî N·∫øu ch·∫ø ƒë·ªô t·ª± ƒë·ªông ƒëang b·∫≠t, kh√¥ng cho ph√©p ƒëi·ªÅu khi·ªÉn th·ªß c√¥ng
        Serial.println("‚õî Kh√¥ng th·ªÉ thao t√°c th·ªß c√¥ng khi Auto b·∫≠t!");
        Blynk.virtualWrite(V1, fanState); // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã tr√™n Blynk
    }
}

// üîπ C·∫•u h√¨nh ESP32
void setup() {
    Serial.begin(115200); // Kh·ªüi ƒë·ªông Serial Monitor v·ªõi baud rate 115200
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD); // K·∫øt n·ªëi WiFi

    dht.begin(); // Kh·ªüi t·∫°o c·∫£m bi·∫øn DHT11
    pinMode(RELAY_FAN_PIN, OUTPUT); // Thi·∫øt l·∫≠p ch√¢n relay c·ªßa qu·∫°t l√† OUTPUT
    digitalWrite(RELAY_FAN_PIN, HIGH); // M·∫∑c ƒë·ªãnh t·∫Øt qu·∫°t khi kh·ªüi ƒë·ªông

    Blynk.begin(BLYNK_AUTH_TOKEN, WIFI_SSID, WIFI_PASSWORD); // K·∫øt n·ªëi Blynk

    // T·∫°o mutex ƒë·ªÉ qu·∫£n l√Ω truy c·∫≠p WiFi v√† bi·∫øn nhi·ªát ƒë·ªô
    wifiMutex = xSemaphoreCreateMutex();
    tempMutex = xSemaphoreCreateMutex();

    // Kh·ªüi t·∫°o c√°c task FreeRTOS ƒë·ªÉ ch·∫°y song song
    xTaskCreate(WiFiTask, "WiFiTask", 4096, NULL, 1, NULL);
    xTaskCreate(MQTTTask, "MQTTTask", 4096, NULL, 1, NULL);
    xTaskCreate(DHTTask, "DHTTask", 4096, NULL, 1, NULL);
    xTaskCreate(FanControlTask, "FanControlTask", 4096, NULL, 1, NULL);
    xTaskCreate(FirebaseTask, "FirebaseTask", 4096, NULL, 1, NULL);

}

// üîÑ Loop ch√≠nh, ch·ªâ ch·∫°y Blynk
void loop() {
    Blynk.run();
}
